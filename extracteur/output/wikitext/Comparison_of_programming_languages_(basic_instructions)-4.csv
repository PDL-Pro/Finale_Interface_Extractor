 ; fixed size array ; fixed size array ; dynamic size array ; dynamic size array 
 ; one-dimensional array ; multi-dimensional array ; one-dimensional array ; multi-dimensional array 
 Ada ; array ( .. ) of orarray () of  ; array (<first1> .. <last1>, <first2> .. <last2>, ...) of orarray (<discrete_type1>, <discrete_type2>, ...) of  ; array ( range <>) of  ; array (<discrete_type1> range <>, <discrete_type2> range <>, ...) of  
 ALGOL 68 ; [first:last]«modename»or simply:[size]«modename» ; [first1:last1, first2:last2]«modename»or[first1:last1][first2:last2]«modename»etc. ; flex[first:last]«modename»or simply:flex[size]«modename» ; flex[first1:last1, first2:last2]«modename»orflex[first1:last1]flex[first2:last2]«modename» etc. 
 C (C99) ; type name[size] ; type name[size1][size2] ; type *nameor within a block:int n = ..., type name[n] ; 
 C++ (STL) ; «std::»array<type, size>(C++11) ; ; «std::»vector<type> ; «std::»vector<type> 
 C# ; type[] ; type[,,...] ; System.Collections.ArrayListorSystem.Collections.Generic.List<type> ; 
 Java ; type[] ; type[][]... ; ArrayList or ArrayList<type> ; 
 D ; type[size] ; type[size1][size2] ; type[] ; 
 Go ; [size]type ; [size1][size2]...type ; []type ; [][]type ; 
 Rust ; [type, size] ; [[type, size1], size2] ; Vec<type> ; Vec<Vec<type>> ; 
 Swift ;  ;  ; [type] or Array<type> ; [[type]] or Array<Array<type>> ; 
 Objective-C ; NSArray ; ; NSMutableArray ; 
 JavaScript ; n/a ; n/a ;Array ;Array 
 Common Lisp ; (simple-array type (dimension)) ; (simple-array type (dimension1 dimension2)) ; (array type (dimension)) ; (array type (dimension1 dimension2)) 
 Scheme ;  ;  ;  ;  
 ISLISP ;  ;  ;  ;  
 Pascal ;array[first..last] of type ;array[first1..last1] of array[first2..last2]  ... of type  or  array[first1..last1, first2..last2, ...] of type  ; n/a ; n/a 
 Object Pascal (Delphi) ;array[first..last] of type ;array[first1..last1] of array[first2..last2]  ... of type  or  array[first1..last1, first2..last2, ...] of type  ;array of type ;array of array ... of type 
 Visual Basic ;  ;  ; ; 
 Visual Basic .NET ; type() ; type(,,...) ; System.Collections.ArrayListorSystem.Collections.Generic.List(Of type) ; 
 Python ;  ;  ; list ;  
 S-Lang ;  ;  ; ; 
 Fortran ;  type :: name(size) ;  type :: name(size1, size2,...) ;  type, ALLOCATABLE :: name(:) ;  type, ALLOCATABLE :: name(:,:,...) 
 PHP ;  ; ; array ; 
 Perl ;  ;  ; ; 
 Raku ;  ;  ; Array[type] or Array of type ; 
 Ruby ;  ;  ; Array ; 
 Scala ; Array[type] ; Array[...[Array[type]]...] ; ArrayBuffer[type] ; 
 Seed7 ; array typeorarray [idxType] type ; array array typeorarray [idxType] array [idxType] type ; array typeorarray [idxType] type ; array array typeorarray [idxType] array [idxType] type 
 Smalltalk ; Array ;  ; OrderedCollection ; 
 Windows PowerShell ; type[] ;type[,,...] ; ; 
 OCaml ; type array ; type array ... array ;  ; 
 F# ; type [] or type array ; type [,,...] ; System.Collections.ArrayListorSystem.Collections.Generic.List<type> ; 
 Standard ML ; type vector or type array ;  ; ; 
 Haskell (GHC) ;  ;  ; ; 
 COBOL ; level-number type OCCURS size «TIMES». ; one-dimensional array definition... ; level-number type OCCURS min-size TO max-size «TIMES» DEPENDING «ON» size. ; n/a 
