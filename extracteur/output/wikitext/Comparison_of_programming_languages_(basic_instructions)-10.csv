 ; exit block(break) ; continue ; label ; branch (goto) ; return value from generator 
 Ada ; exit «loop_name» «when condition» ; n/a ; label: ; goto label ;  n/a 
 ALGOL 68 ; value exit, ... ; do statements, skip exit, label: statements od ; label: ... ; go to label, ...goto label, ...label, ... ; yield(value) (Callback) 
 APL ; :Leave ; :Continue ; label: ; →labelor:GoTo label ;  n/a 
 C (C99) ; break, ; continue, ; label: ; goto label, ; rowspan=4 n/a 
 Objective-C ; break, ; continue, ; label: ; goto label, 
 C++ (STL) ; break, ; continue, ; label: ; goto label, 
 D ; break, ; continue, ; label: ; goto label, 
 C# ; break, ; continue, ; label: ; goto label, ; yield return value, 
 Java ; break «label», ; continue «label», ; label: ; rowspan=2 n/a ; 
 JavaScript ; break «label», ; continue «label», ; label: ; yield value«,» 
 PHP ; break «levels», ; continue «levels», ; label: ; goto label, ; yield «key =>» value, 
 Perl ; last «label», ; next «label», ; label: ; goto label, ;  
 Raku ; last «label», ; next «label», ; label: ; goto label, ;  
 Go ; break «label» ; continue «label» ; label: ; goto label ;  
 Swift ; break «label» ; continue «label» ; label: ; n/a ;  
 Bash shell ; break «levels» ; continue «levels» ; n/a ; n/a  ; n/a 
 Common Lisp ; (return) or  (return-from block) or  (loop-finish) ;  ; (tagbody tag...tag...) ; (go tag) ; 
 Scheme ;  ;  ; ;  ; 
 ISLISP ; (return-from block) ;  ; (tagbody tag...tag...) ; (go tag) ; 
 Pascal(ISO) ; colspan=2 n/a ; label: ; goto label, ; rowspan=4 n/a 
 Pascal(FPC) ; break, ; label: ; goto label, ; continue, 
 Visual Basic ; Exit blockAlternatively, for methods,  Return ; n/a ; label: ; GoTo label 
 Xojo ; Exit blockAlternatively, for methods,  Return ;Continue block ; label: ; GoTo label 
 Visual Basic .NET ; Exit blockAlternatively, for methods,  Return ;Continue block ; label: ; GoTo label ; Yield value 
 Python ; break ; continue ; colspan=2 n/a ; yield value 
 RPG IV ; LEAVE, ; ITER, ;  ;  ;  
 S-Lang ; break, ; continue, ; ;  ; 
 Fortran ; EXIT ; CYCLE ; label ; GOTO label ; n/a 
 Ruby ; break ; next ;  ;  ;  
 Windows PowerShell ; break «label» ; continue ; ; ; 
 OCaml ; rowspan=4 colspan=4 n/a ; 
 F# ;  
 Standard ML ; 
 Haskell (GHC) ; 
 COBOL ; EXITPERFORM or EXITPARAGRAPH or EXITSECTION or EXIT. ; EXIT PERFORM CYCLE ; label «SECTION». ; GO TO label ; n/a 
 Ya ; break «from where», f.e. break for switch, ; continue «to where», f.e. continue for switch, ; :label ; goto :label, ; n/a 
